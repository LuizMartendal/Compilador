#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = SLR
#RegularDefinitions
pp: "_" (i | f | b | s)
maiusculo: [A-Z]
minusculo: [a-z]
mindig: [a-z0-9]
inicio: ({maiusculo} {mindig} | {minusculo})
resto: ({maiusculo} {mindig} | {mindig})
int: 0 | [1-9][0-9]*
letra: (i | f | s | b)

#Tokens
palavra_reservada: [a-z]+

// identificador
identificador: {pp} ({maiusculo} | (({inicio}) ({resto})* {maiusculo}?))

// constante_int 
constante_int: {int}

// constante_float
constante_float: {int} "." [0-9](0* [1-9])*

// constante_string
constante_string: \" ([^\n\"\\"%"] | "%" {letra})* \"

// relação de palavras reservadas
// do if else false fun in main out repeat true while
// do = palavra: "do"
do = palavra_reservada: "do"
if = palavra_reservada: "if"
else = palavra_reservada: "else"
false = palavra_reservada: "false"
fun = palavra_reservada: "fun"
in = palavra_reservada: "in"
main = palavra_reservada: "main"
out = palavra_reservada: "out"
repeat = palavra_reservada: "repeat"
true = palavra_reservada: "true"
while= palavra_reservada: "while"

// relação de símbolos especias
// & | ! , ; = : ( ) { } == != < > + - * /
"&"
"|"
"!"
","
";"
"="
":"
"("
")"
"{"
"}"
"=="
"!="
"<"
">"
"+"
"-"
"*"
"/" 

// reconher e ignorar caracteres de formatação
// :[\n\t\s\r]
: [\n\t\s\r]

// reconhecer e ignorar comentários de linha e de bloco
// :!{linha}
:! "#" (.)*
:! "[" ([^"[" "]"])* "]"
#NonTerminals
<geral>
<cmd>
<aux1>
<aux2>
<aux3>
<aux4>
<aux5>
<aux6>
<aux7>
<listinst>
<listid>
<listin>
<listexp>
<listcmd>
<instrucao>
<decconst>
<expressao>
<decvar>
<valor>
<atri>
<entrada>
<saida>
<selecao>
<repeticao>
#Grammar
<geral> ::= fun main "{" <listinst> "}";


<listinst> ::= <instrucao> ";" <aux1>;
<aux1> ::= <listinst> | î;

<instrucao> ::= <decconst> | <decvar> | <cmd>;

<decconst> ::= <listid> ":" <valor>;
<listid> ::= identificador <aux2>;
<aux2> ::= "," <listid> | î;

<valor> ::= constante_int | constante_float | constante_string | false | true;

<decvar> ::= <listid>;

<cmd> ::= <atri> | <entrada> | <saida> | <selecao> | <repeticao>;

<atri> ::= <listid> "=" <expressao>;
<entrada> ::= in "(" <listin> ")";
<listin> ::= constante_string "," <aux3> | <aux3>;
<aux3> ::= <listid> <aux4>;
<aux4> ::= î | ";" <listin>;

<saida> ::= out "(" <listexp> ")";
<listexp> ::= <expressao> <aux5>;
<aux5> ::= î | "," <listexp>;

<selecao> ::= if "(" <expressao> ")" "{" <listcmd> "}" <aux6>;
<listcmd> ::= <cmd> <aux7>;
<aux7> ::= î | <listcmd>;
<aux6> ::= î | else "{" <listcmd> "}";

<repeticao> ::= while "(" <expressao> ")" do "{" <listcmd> "}" | repeat "{" <listcmd> "}" while "(" <expressao> ")";

