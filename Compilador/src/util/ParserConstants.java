package util;

public interface ParserConstants
{
    int START_SYMBOL = 37;

    int FIRST_NON_TERMINAL    = 37;
    int FIRST_SEMANTIC_ACTION = 70;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 24, -1, -1, -1, -1, 22, -1, -1, -1, 20, -1, 21, 23, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  2, -1, -1, -1, -1,  2, -1, -1, -1,  2, -1,  2,  2, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 14, 14, 14, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 39, -1, -1, -1, -1, 39, -1, -1, -1, 39, -1, 39, 39, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1,  1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 28, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 33, 33, 33, 33, -1, -1, -1, 33, -1, -1, -1, -1, -1, 33, -1, -1, -1, 33, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1 },
        { -1, -1, 37, -1, -1, -1, -1, 37, -1, -1, -1, 37, -1, 37, 37, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  4, -1, -1, -1, -1,  7, -1, -1, -1,  5, -1,  6,  8, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 44, 44, 44, 44, -1, -1, -1, 44, -1, -1, -1, -1, -1, 44, -1, -1, -1, 44, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1 },
        { -1, -1, -1, 15, 16, 17, -1, -1, -1, 18, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 48, 48, 48, 48, -1, -1, -1, 50, -1, -1, -1, -1, -1, 49, -1, -1, -1, 51, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 48, 48, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 47, -1, 45, 45, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 52, 52, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 53, -1, 53, 53, -1, -1, -1, 53, -1, -1, 54, 54, 54, 54, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 56, 57, 58, -1, -1, -1, -1 },
        { -1, -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, 60, 60, -1, -1, -1, 60, -1, -1, 60, 60, 60, 60, 61, 62, -1, -1 },
        { -1, -1, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, 63, 63, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, 64, 64, -1, -1, -1, 64, -1, -1, 64, 64, 64, 64, 64, 64, 65, 66 },
        { -1, -1, 67, 68, 69, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, 72, 73, -1, -1 },
        { -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 11, 13, 27, 47, 28 },
        { 52, 22, 39 },
        { 47 },
        {  0 },
        { 48, 46 },
        { 55 },
        { 56 },
        { 57 },
        { 58 },
        { 24, 54 },
        {  0 },
        { 23, 53 },
        {  3, 40 },
        { 21, 48 },
        {  0 },
        {  4 },
        {  5 },
        {  6 },
        { 10 },
        { 16 },
        { 55 },
        { 56 },
        { 57 },
        { 58 },
        { 69 },
        { 48, 23, 53 },
        { 12, 25, 49, 26 },
        {  6, 21, 41 },
        { 41 },
        { 48, 42 },
        {  0 },
        { 22, 49 },
        { 14, 25, 50, 26 },
        { 53, 43 },
        {  0 },
        { 21, 50 },
        {  8, 25, 53, 26, 27, 51, 28, 44 },
        { 38, 22, 45 },
        {  0 },
        { 51 },
        {  0 },
        {  9, 27, 51, 28 },
        { 17, 25, 53, 26,  7, 27, 51, 28 },
        { 15, 27, 51, 28, 17, 25, 53, 26 },
        { 59, 60 },
        {  0 },
        { 18, 59, 60 },
        { 19, 59, 60 },
        { 61 },
        { 16 },
        { 10 },
        { 20, 59 },
        { 64, 62 },
        {  0 },
        { 63, 64 },
        { 29 },
        { 30 },
        { 31 },
        { 32 },
        { 66, 65 },
        {  0 },
        { 33, 66, 65 },
        { 34, 66, 65 },
        { 68, 67 },
        {  0 },
        { 35, 68, 67 },
        { 36, 68, 67 },
        {  3 },
        {  4 },
        {  5 },
        {  6 },
        { 25, 53, 26 },
        { 33, 68 },
        { 34, 68 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado EOF",
        "esperado palavra_reservada",
        "esperado identificador",
        "esperado constante_int",
        "esperado constante_float",
        "esperado constante_string",
        "esperado do",
        "esperado if",
        "esperado else",
        "esperado false",
        "esperado fun",
        "esperado in",
        "esperado main",
        "esperado out",
        "esperado repeat",
        "esperado true",
        "esperado while",
        "esperado &",
        "esperado |",
        "esperado !",
        "esperado ,",
        "esperado ;",
        "esperado =",
        "esperado :",
        "esperado (",
        "esperado )",
        "esperado {",
        "esperado }",
        "esperado ==",
        "esperado !=",
        "esperado <",
        "esperado >",
        "esperado +",
        "esperado -",
        "esperado *",
        "esperado /",
        "esperado fun",//"<geral> inváslido",
        "esperado identificador if in out repeat while", //"<cmd> inváslido",
        "esperado identificador if in out repeat while }",//"<aux1> inválido",
        "esperado , ; = : )",//"<aux2> inválido",
        "esperado identificador",//"<aux3> inválido",
        "esperado ; )",//"<aux4> inválido",
        "esperado , )",//"<aux5> inválido",
        "esperado else ;",//"<aux6> inválido",
        "esperado identificador if in out repeat while }",//"<aux7> inválido",
        "esperado ; = :",//"<aux8> inválido",
        "esperado identificador if in out repeat while",//"<listinst> inválido",
        "esperado identificador",//"<listid> inválido",
        "esperado identificador constante_string",//"<listin> inválido",
        "esperado expressao",//"<listexp> inválido",
        "esperado identificador if in out repeat while",//"<listcmd> inválido",
        "esperado identificador if in out repeat while",//"<instrucao> inválido",
        "esperado expressao",//"<expressao> inválido",
        "esperado constante_int constante_float constante_string false true",//"<valor> inválido",
        "esperado in",//"<entrada> inválido",
        "esperado out",//"<saida> inválido",
        "esperado if",//"<selecao> inválido",
        "esperado repeat while",//"<repeticao> inválido",
        "esperado expressao",//"<elemento> inválido",
        "esperado expressao",//"<expressao_> inválido",
        "esperado expressao",//"<relacional> inválido",
        "esperado expressao",//"<relacional_> inválido",
        "esperado == != < >",//"<operador_relacional> inválido",
        "esperado expressao",//"<aritmetica> inválido",
        "esperado expressao",//"<aritmetica_> inválido",
        "esperado expressao",//"<termo> inválido",
        "esperado expressao",//"<termo_> inválido",
        "esperado expressao",//"<fator> inválido",
        "esperado identificador",//"<atribuicao> inválido"
    };
}
